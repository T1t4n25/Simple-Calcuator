
session2-keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b48  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00000b48  00000bbc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000bde  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c10  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000120  00000000  00000000  00000c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001856  00000000  00000000  00000d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000984  00000000  00000000  000025c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d9c  00000000  00000000  00002f46  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002c4  00000000  00000000  00003ce4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007c3  00000000  00000000  00003fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000f57  00000000  00000000  0000476b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f8  00000000  00000000  000056c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e4       	ldi	r30, 0x48	; 72
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 38       	cpi	r26, 0x82	; 130
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 4e 03 	call	0x69c	; 0x69c <main>
  7a:	0c 94 a2 05 	jmp	0xb44	; 0xb44 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <KPD_voidInit>:
 * @retVal void
 */
void KPD_voidInit(void)
{
	/* Config ROWS pins as I/P pins */ 
	DIO_voidSetPinDirection(KPD_ROW0_PORT, KPD_ROW0_PIN, DIO_PIN_INPUT);
  82:	40 e0       	ldi	r20, 0x00	; 0
  84:	60 e0       	ldi	r22, 0x00	; 0
  86:	83 e0       	ldi	r24, 0x03	; 3
  88:	0e 94 c0 03 	call	0x780	; 0x780 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_ROW1_PORT, KPD_ROW1_PIN, DIO_PIN_INPUT);
  8c:	40 e0       	ldi	r20, 0x00	; 0
  8e:	61 e0       	ldi	r22, 0x01	; 1
  90:	83 e0       	ldi	r24, 0x03	; 3
  92:	0e 94 c0 03 	call	0x780	; 0x780 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_ROW2_PORT, KPD_ROW2_PIN, DIO_PIN_INPUT);
  96:	40 e0       	ldi	r20, 0x00	; 0
  98:	62 e0       	ldi	r22, 0x02	; 2
  9a:	83 e0       	ldi	r24, 0x03	; 3
  9c:	0e 94 c0 03 	call	0x780	; 0x780 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_ROW3_PORT, KPD_ROW3_PIN, DIO_PIN_INPUT);
  a0:	40 e0       	ldi	r20, 0x00	; 0
  a2:	63 e0       	ldi	r22, 0x03	; 3
  a4:	83 e0       	ldi	r24, 0x03	; 3
  a6:	0e 94 c0 03 	call	0x780	; 0x780 <DIO_voidSetPinDirection>

	/* Activate Internal pull up for ROWS pins */ 
	DIO_voidActivePinInPullUpResistance(KPD_ROW0_PORT, KPD_ROW0_PIN);
  aa:	60 e0       	ldi	r22, 0x00	; 0
  ac:	83 e0       	ldi	r24, 0x03	; 3
  ae:	0e 94 ff 04 	call	0x9fe	; 0x9fe <DIO_voidActivePinInPullUpResistance>
	DIO_voidActivePinInPullUpResistance(KPD_ROW1_PORT, KPD_ROW1_PIN);
  b2:	61 e0       	ldi	r22, 0x01	; 1
  b4:	83 e0       	ldi	r24, 0x03	; 3
  b6:	0e 94 ff 04 	call	0x9fe	; 0x9fe <DIO_voidActivePinInPullUpResistance>
	DIO_voidActivePinInPullUpResistance(KPD_ROW2_PORT, KPD_ROW2_PIN);
  ba:	62 e0       	ldi	r22, 0x02	; 2
  bc:	83 e0       	ldi	r24, 0x03	; 3
  be:	0e 94 ff 04 	call	0x9fe	; 0x9fe <DIO_voidActivePinInPullUpResistance>
	DIO_voidActivePinInPullUpResistance(KPD_ROW3_PORT, KPD_ROW3_PIN);
  c2:	63 e0       	ldi	r22, 0x03	; 3
  c4:	83 e0       	ldi	r24, 0x03	; 3
  c6:	0e 94 ff 04 	call	0x9fe	; 0x9fe <DIO_voidActivePinInPullUpResistance>

	/* Config COLS pins as O/P pins */
	DIO_voidSetPinDirection(KPD_COL0_PORT, KPD_COL0_PIN, DIO_PIN_OUTPUT);
  ca:	41 e0       	ldi	r20, 0x01	; 1
  cc:	64 e0       	ldi	r22, 0x04	; 4
  ce:	83 e0       	ldi	r24, 0x03	; 3
  d0:	0e 94 c0 03 	call	0x780	; 0x780 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_COL1_PORT, KPD_COL1_PIN, DIO_PIN_OUTPUT);
  d4:	41 e0       	ldi	r20, 0x01	; 1
  d6:	65 e0       	ldi	r22, 0x05	; 5
  d8:	83 e0       	ldi	r24, 0x03	; 3
  da:	0e 94 c0 03 	call	0x780	; 0x780 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_COL2_PORT, KPD_COL2_PIN, DIO_PIN_OUTPUT);
  de:	41 e0       	ldi	r20, 0x01	; 1
  e0:	66 e0       	ldi	r22, 0x06	; 6
  e2:	83 e0       	ldi	r24, 0x03	; 3
  e4:	0e 94 c0 03 	call	0x780	; 0x780 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_COL3_PORT, KPD_COL3_PIN, DIO_PIN_OUTPUT);
  e8:	41 e0       	ldi	r20, 0x01	; 1
  ea:	67 e0       	ldi	r22, 0x07	; 7
  ec:	83 e0       	ldi	r24, 0x03	; 3
  ee:	0e 94 c0 03 	call	0x780	; 0x780 <DIO_voidSetPinDirection>

	/* Set COLS pins as Initially high */ 
	DIO_voidSetPinValue(KPD_COL0_PORT, KPD_COL0_PIN, DIO_PIN_HIGH);
  f2:	41 e0       	ldi	r20, 0x01	; 1
  f4:	64 e0       	ldi	r22, 0x04	; 4
  f6:	83 e0       	ldi	r24, 0x03	; 3
  f8:	0e 94 42 04 	call	0x884	; 0x884 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_COL1_PORT, KPD_COL1_PIN, DIO_PIN_HIGH);
  fc:	41 e0       	ldi	r20, 0x01	; 1
  fe:	65 e0       	ldi	r22, 0x05	; 5
 100:	83 e0       	ldi	r24, 0x03	; 3
 102:	0e 94 42 04 	call	0x884	; 0x884 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_COL2_PORT, KPD_COL2_PIN, DIO_PIN_HIGH);
 106:	41 e0       	ldi	r20, 0x01	; 1
 108:	66 e0       	ldi	r22, 0x06	; 6
 10a:	83 e0       	ldi	r24, 0x03	; 3
 10c:	0e 94 42 04 	call	0x884	; 0x884 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_COL3_PORT, KPD_COL3_PIN, DIO_PIN_HIGH);
 110:	41 e0       	ldi	r20, 0x01	; 1
 112:	67 e0       	ldi	r22, 0x07	; 7
 114:	83 e0       	ldi	r24, 0x03	; 3
 116:	0e 94 42 04 	call	0x884	; 0x884 <DIO_voidSetPinValue>
 11a:	08 95       	ret

0000011c <KPD_voidGetValue>:
 * @brief the function Loop on COLS and activate each one, Loop on ROWS and check each one  
 * @param[out] copy_pu8ReturnedValue: The ASCII of pressed key if there is one.
 * @retVal void
 */
void KPD_voidGetValue(u8* copy_pu8ReturnedValue)
{
 11c:	6f 92       	push	r6
 11e:	7f 92       	push	r7
 120:	8f 92       	push	r8
 122:	9f 92       	push	r9
 124:	af 92       	push	r10
 126:	bf 92       	push	r11
 128:	cf 92       	push	r12
 12a:	df 92       	push	r13
 12c:	ef 92       	push	r14
 12e:	ff 92       	push	r15
 130:	0f 93       	push	r16
 132:	1f 93       	push	r17
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	cd b7       	in	r28, 0x3d	; 61
 13a:	de b7       	in	r29, 0x3e	; 62
 13c:	a1 97       	sbiw	r28, 0x21	; 33
 13e:	0f b6       	in	r0, 0x3f	; 63
 140:	f8 94       	cli
 142:	de bf       	out	0x3e, r29	; 62
 144:	0f be       	out	0x3f, r0	; 63
 146:	cd bf       	out	0x3d, r28	; 61
	if(copy_pu8ReturnedValue != NULL)
 148:	00 97       	sbiw	r24, 0x00	; 0
 14a:	09 f4       	brne	.+2      	; 0x14e <KPD_voidGetValue+0x32>
 14c:	81 c0       	rjmp	.+258    	; 0x250 <KPD_voidGetValue+0x134>
 14e:	5c 01       	movw	r10, r24
	{
		u8 local_u8ColsCounter, local_u8RowsCounter;
		u8 local_u8PinState;
		u8 local_u8ColsPorts[4] = {KPD_COL0_PORT, KPD_COL1_PORT, KPD_COL2_PORT, KPD_COL3_PORT};
 150:	83 e0       	ldi	r24, 0x03	; 3
 152:	8d 8f       	std	Y+29, r24	; 0x1d
 154:	8e 8f       	std	Y+30, r24	; 0x1e
 156:	8f 8f       	std	Y+31, r24	; 0x1f
 158:	88 a3       	std	Y+32, r24	; 0x20
		u8 local_u8ColsPins [4] = {KPD_COL0_PIN , KPD_COL1_PIN , KPD_COL2_PIN , KPD_COL3_PIN};
 15a:	94 e0       	ldi	r25, 0x04	; 4
 15c:	99 8f       	std	Y+25, r25	; 0x19
 15e:	95 e0       	ldi	r25, 0x05	; 5
 160:	9a 8f       	std	Y+26, r25	; 0x1a
 162:	96 e0       	ldi	r25, 0x06	; 6
 164:	9b 8f       	std	Y+27, r25	; 0x1b
 166:	97 e0       	ldi	r25, 0x07	; 7
 168:	9c 8f       	std	Y+28, r25	; 0x1c
		u8 local_u8RowsPorts[4] = {KPD_ROW0_PORT, KPD_ROW1_PORT, KPD_ROW2_PORT, KPD_ROW3_PORT};
 16a:	8d 8b       	std	Y+21, r24	; 0x15
 16c:	8e 8b       	std	Y+22, r24	; 0x16
 16e:	8f 8b       	std	Y+23, r24	; 0x17
 170:	88 8f       	std	Y+24, r24	; 0x18
		u8 local_u8RowsPins [4] = {KPD_ROW0_PIN , KPD_ROW1_PIN , KPD_ROW2_PIN , KPD_ROW3_PIN};
 172:	19 8a       	std	Y+17, r1	; 0x11
 174:	91 e0       	ldi	r25, 0x01	; 1
 176:	9a 8b       	std	Y+18, r25	; 0x12
 178:	92 e0       	ldi	r25, 0x02	; 2
 17a:	9b 8b       	std	Y+19, r25	; 0x13
 17c:	8c 8b       	std	Y+20, r24	; 0x14
		u8 local_u8KPD_Chars[4][4] = KPD_KEYS; 
 17e:	80 e1       	ldi	r24, 0x10	; 16
 180:	e0 e6       	ldi	r30, 0x60	; 96
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	de 01       	movw	r26, r28
 186:	11 96       	adiw	r26, 0x01	; 1
 188:	01 90       	ld	r0, Z+
 18a:	0d 92       	st	X+, r0
 18c:	8a 95       	dec	r24
 18e:	e1 f7       	brne	.-8      	; 0x188 <KPD_voidGetValue+0x6c>

		*copy_pu8ReturnedValue = KPD_NOT_PRESSED;
 190:	8f ef       	ldi	r24, 0xFF	; 255
 192:	f5 01       	movw	r30, r10
 194:	80 83       	st	Z, r24
		for(local_u8ColsCounter = 0;local_u8ColsCounter < 4; local_u8ColsCounter++)
 196:	00 e0       	ldi	r16, 0x00	; 0
 198:	58 c0       	rjmp	.+176    	; 0x24a <KPD_voidGetValue+0x12e>
		{
			/* Activate Each Column with low value */
			DIO_voidSetPinValue(local_u8ColsPorts[local_u8ColsCounter], local_u8ColsPins[local_u8ColsCounter], DIO_PIN_LOW);
 19a:	c0 2e       	mov	r12, r16
 19c:	d1 2c       	mov	r13, r1
 19e:	e9 e1       	ldi	r30, 0x19	; 25
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	ec 0f       	add	r30, r28
 1a4:	fd 1f       	adc	r31, r29
 1a6:	ec 0d       	add	r30, r12
 1a8:	fd 1d       	adc	r31, r13
 1aa:	80 80       	ld	r8, Z
 1ac:	ed e1       	ldi	r30, 0x1D	; 29
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	ec 0f       	add	r30, r28
 1b2:	fd 1f       	adc	r31, r29
 1b4:	ec 0d       	add	r30, r12
 1b6:	fd 1d       	adc	r31, r13
 1b8:	90 80       	ld	r9, Z
 1ba:	40 e0       	ldi	r20, 0x00	; 0
 1bc:	68 2d       	mov	r22, r8
 1be:	89 2d       	mov	r24, r9
 1c0:	0e 94 42 04 	call	0x884	; 0x884 <DIO_voidSetPinValue>

			for(local_u8RowsCounter = 0; local_u8RowsCounter < 4; local_u8RowsCounter++)
 1c4:	10 e0       	ldi	r17, 0x00	; 0
 1c6:	37 c0       	rjmp	.+110    	; 0x236 <KPD_voidGetValue+0x11a>
			{
				/* Check Each Row (if == 0?) */
				DIO_voidGetPinValue(local_u8RowsPorts[local_u8RowsCounter], local_u8RowsPins[local_u8RowsCounter], &local_u8PinState);
 1c8:	e1 2e       	mov	r14, r17
 1ca:	f1 2c       	mov	r15, r1
 1cc:	e1 e1       	ldi	r30, 0x11	; 17
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	ec 0f       	add	r30, r28
 1d2:	fd 1f       	adc	r31, r29
 1d4:	ee 0d       	add	r30, r14
 1d6:	ff 1d       	adc	r31, r15
 1d8:	70 80       	ld	r7, Z
 1da:	e5 e1       	ldi	r30, 0x15	; 21
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	ec 0f       	add	r30, r28
 1e0:	fd 1f       	adc	r31, r29
 1e2:	ee 0d       	add	r30, r14
 1e4:	ff 1d       	adc	r31, r15
 1e6:	60 80       	ld	r6, Z
 1e8:	ae 01       	movw	r20, r28
 1ea:	4f 5d       	subi	r20, 0xDF	; 223
 1ec:	5f 4f       	sbci	r21, 0xFF	; 255
 1ee:	67 2d       	mov	r22, r7
 1f0:	86 2d       	mov	r24, r6
 1f2:	0e 94 c4 04 	call	0x988	; 0x988 <DIO_voidGetPinValue>

				/* Is Pressed? */
				if(0 == local_u8PinState)
 1f6:	89 a1       	ldd	r24, Y+33	; 0x21
 1f8:	81 11       	cpse	r24, r1
 1fa:	1c c0       	rjmp	.+56     	; 0x234 <KPD_voidGetValue+0x118>
 1fc:	07 c0       	rjmp	.+14     	; 0x20c <KPD_voidGetValue+0xf0>
				{
					while(0 == local_u8PinState)
					{
						DIO_voidGetPinValue(local_u8RowsPorts[local_u8RowsCounter], local_u8RowsPins[local_u8RowsCounter], &local_u8PinState);
 1fe:	ae 01       	movw	r20, r28
 200:	4f 5d       	subi	r20, 0xDF	; 223
 202:	5f 4f       	sbci	r21, 0xFF	; 255
 204:	67 2d       	mov	r22, r7
 206:	86 2d       	mov	r24, r6
 208:	0e 94 c4 04 	call	0x988	; 0x988 <DIO_voidGetPinValue>
				DIO_voidGetPinValue(local_u8RowsPorts[local_u8RowsCounter], local_u8RowsPins[local_u8RowsCounter], &local_u8PinState);

				/* Is Pressed? */
				if(0 == local_u8PinState)
				{
					while(0 == local_u8PinState)
 20c:	89 a1       	ldd	r24, Y+33	; 0x21
 20e:	88 23       	and	r24, r24
 210:	b1 f3       	breq	.-20     	; 0x1fe <KPD_voidGetValue+0xe2>
					{
						DIO_voidGetPinValue(local_u8RowsPorts[local_u8RowsCounter], local_u8RowsPins[local_u8RowsCounter], &local_u8PinState);
					}
					*copy_pu8ReturnedValue = local_u8KPD_Chars[local_u8RowsCounter][local_u8ColsCounter];
 212:	ee 0c       	add	r14, r14
 214:	ff 1c       	adc	r15, r15
 216:	ee 0c       	add	r14, r14
 218:	ff 1c       	adc	r15, r15
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	8c 0f       	add	r24, r28
 220:	9d 1f       	adc	r25, r29
 222:	e8 0e       	add	r14, r24
 224:	f9 1e       	adc	r15, r25
 226:	f7 01       	movw	r30, r14
 228:	ec 0d       	add	r30, r12
 22a:	fd 1d       	adc	r31, r13
 22c:	80 81       	ld	r24, Z
 22e:	f5 01       	movw	r30, r10
 230:	80 83       	st	Z, r24
					break;
 232:	03 c0       	rjmp	.+6      	; 0x23a <KPD_voidGetValue+0x11e>
		for(local_u8ColsCounter = 0;local_u8ColsCounter < 4; local_u8ColsCounter++)
		{
			/* Activate Each Column with low value */
			DIO_voidSetPinValue(local_u8ColsPorts[local_u8ColsCounter], local_u8ColsPins[local_u8ColsCounter], DIO_PIN_LOW);

			for(local_u8RowsCounter = 0; local_u8RowsCounter < 4; local_u8RowsCounter++)
 234:	1f 5f       	subi	r17, 0xFF	; 255
 236:	14 30       	cpi	r17, 0x04	; 4
 238:	38 f2       	brcs	.-114    	; 0x1c8 <KPD_voidGetValue+0xac>
					break;
				}
			}

			/* Deactivate Current Column with high value */
			DIO_voidSetPinValue(local_u8ColsPorts[local_u8ColsCounter], local_u8ColsPins[local_u8ColsCounter], DIO_PIN_HIGH);
 23a:	41 e0       	ldi	r20, 0x01	; 1
 23c:	68 2d       	mov	r22, r8
 23e:	89 2d       	mov	r24, r9
 240:	0e 94 42 04 	call	0x884	; 0x884 <DIO_voidSetPinValue>

			if(local_u8RowsCounter < 4)
 244:	14 30       	cpi	r17, 0x04	; 4
 246:	20 f0       	brcs	.+8      	; 0x250 <KPD_voidGetValue+0x134>
		u8 local_u8RowsPorts[4] = {KPD_ROW0_PORT, KPD_ROW1_PORT, KPD_ROW2_PORT, KPD_ROW3_PORT};
		u8 local_u8RowsPins [4] = {KPD_ROW0_PIN , KPD_ROW1_PIN , KPD_ROW2_PIN , KPD_ROW3_PIN};
		u8 local_u8KPD_Chars[4][4] = KPD_KEYS; 

		*copy_pu8ReturnedValue = KPD_NOT_PRESSED;
		for(local_u8ColsCounter = 0;local_u8ColsCounter < 4; local_u8ColsCounter++)
 248:	0f 5f       	subi	r16, 0xFF	; 255
 24a:	04 30       	cpi	r16, 0x04	; 4
 24c:	08 f4       	brcc	.+2      	; 0x250 <KPD_voidGetValue+0x134>
 24e:	a5 cf       	rjmp	.-182    	; 0x19a <KPD_voidGetValue+0x7e>
	}
	else
	{
		// return Error State
	}
}
 250:	a1 96       	adiw	r28, 0x21	; 33
 252:	0f b6       	in	r0, 0x3f	; 63
 254:	f8 94       	cli
 256:	de bf       	out	0x3e, r29	; 62
 258:	0f be       	out	0x3f, r0	; 63
 25a:	cd bf       	out	0x3d, r28	; 61
 25c:	df 91       	pop	r29
 25e:	cf 91       	pop	r28
 260:	1f 91       	pop	r17
 262:	0f 91       	pop	r16
 264:	ff 90       	pop	r15
 266:	ef 90       	pop	r14
 268:	df 90       	pop	r13
 26a:	cf 90       	pop	r12
 26c:	bf 90       	pop	r11
 26e:	af 90       	pop	r10
 270:	9f 90       	pop	r9
 272:	8f 90       	pop	r8
 274:	7f 90       	pop	r7
 276:	6f 90       	pop	r6
 278:	08 95       	ret

0000027a <PRV_voidWriteHalfPort>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 27a:	cf 93       	push	r28
 27c:	c8 2f       	mov	r28, r24
 27e:	80 fd       	sbrc	r24, 0
 280:	06 c0       	rjmp	.+12     	; 0x28e <PRV_voidWriteHalfPort+0x14>
 282:	40 e0       	ldi	r20, 0x00	; 0
 284:	64 e0       	ldi	r22, 0x04	; 4
 286:	82 e0       	ldi	r24, 0x02	; 2
 288:	0e 94 42 04 	call	0x884	; 0x884 <DIO_voidSetPinValue>
 28c:	05 c0       	rjmp	.+10     	; 0x298 <PRV_voidWriteHalfPort+0x1e>
 28e:	41 e0       	ldi	r20, 0x01	; 1
 290:	64 e0       	ldi	r22, 0x04	; 4
 292:	82 e0       	ldi	r24, 0x02	; 2
 294:	0e 94 42 04 	call	0x884	; 0x884 <DIO_voidSetPinValue>
 298:	c1 fd       	sbrc	r28, 1
 29a:	06 c0       	rjmp	.+12     	; 0x2a8 <PRV_voidWriteHalfPort+0x2e>
 29c:	40 e0       	ldi	r20, 0x00	; 0
 29e:	65 e0       	ldi	r22, 0x05	; 5
 2a0:	82 e0       	ldi	r24, 0x02	; 2
 2a2:	0e 94 42 04 	call	0x884	; 0x884 <DIO_voidSetPinValue>
 2a6:	05 c0       	rjmp	.+10     	; 0x2b2 <PRV_voidWriteHalfPort+0x38>
 2a8:	41 e0       	ldi	r20, 0x01	; 1
 2aa:	65 e0       	ldi	r22, 0x05	; 5
 2ac:	82 e0       	ldi	r24, 0x02	; 2
 2ae:	0e 94 42 04 	call	0x884	; 0x884 <DIO_voidSetPinValue>
 2b2:	c2 fd       	sbrc	r28, 2
 2b4:	06 c0       	rjmp	.+12     	; 0x2c2 <PRV_voidWriteHalfPort+0x48>
 2b6:	40 e0       	ldi	r20, 0x00	; 0
 2b8:	66 e0       	ldi	r22, 0x06	; 6
 2ba:	82 e0       	ldi	r24, 0x02	; 2
 2bc:	0e 94 42 04 	call	0x884	; 0x884 <DIO_voidSetPinValue>
 2c0:	05 c0       	rjmp	.+10     	; 0x2cc <PRV_voidWriteHalfPort+0x52>
 2c2:	41 e0       	ldi	r20, 0x01	; 1
 2c4:	66 e0       	ldi	r22, 0x06	; 6
 2c6:	82 e0       	ldi	r24, 0x02	; 2
 2c8:	0e 94 42 04 	call	0x884	; 0x884 <DIO_voidSetPinValue>
 2cc:	c3 fd       	sbrc	r28, 3
 2ce:	06 c0       	rjmp	.+12     	; 0x2dc <PRV_voidWriteHalfPort+0x62>
 2d0:	40 e0       	ldi	r20, 0x00	; 0
 2d2:	67 e0       	ldi	r22, 0x07	; 7
 2d4:	82 e0       	ldi	r24, 0x02	; 2
 2d6:	0e 94 42 04 	call	0x884	; 0x884 <DIO_voidSetPinValue>
 2da:	05 c0       	rjmp	.+10     	; 0x2e6 <PRV_voidWriteHalfPort+0x6c>
 2dc:	41 e0       	ldi	r20, 0x01	; 1
 2de:	67 e0       	ldi	r22, 0x07	; 7
 2e0:	82 e0       	ldi	r24, 0x02	; 2
 2e2:	0e 94 42 04 	call	0x884	; 0x884 <DIO_voidSetPinValue>
 2e6:	cf 91       	pop	r28
 2e8:	08 95       	ret

000002ea <PRV_voidEnableTriggerWrite>:
 2ea:	41 e0       	ldi	r20, 0x01	; 1
 2ec:	62 e0       	ldi	r22, 0x02	; 2
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	0e 94 42 04 	call	0x884	; 0x884 <DIO_voidSetPinValue>
 2f4:	8f ec       	ldi	r24, 0xCF	; 207
 2f6:	97 e0       	ldi	r25, 0x07	; 7
 2f8:	01 97       	sbiw	r24, 0x01	; 1
 2fa:	f1 f7       	brne	.-4      	; 0x2f8 <PRV_voidEnableTriggerWrite+0xe>
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <PRV_voidEnableTriggerWrite+0x14>
 2fe:	00 00       	nop
 300:	40 e0       	ldi	r20, 0x00	; 0
 302:	62 e0       	ldi	r22, 0x02	; 2
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	0e 94 42 04 	call	0x884	; 0x884 <DIO_voidSetPinValue>
 30a:	8f ec       	ldi	r24, 0xCF	; 207
 30c:	97 e0       	ldi	r25, 0x07	; 7
 30e:	01 97       	sbiw	r24, 0x01	; 1
 310:	f1 f7       	brne	.-4      	; 0x30e <PRV_voidEnableTriggerWrite+0x24>
 312:	00 c0       	rjmp	.+0      	; 0x314 <PRV_voidEnableTriggerWrite+0x2a>
 314:	00 00       	nop
 316:	08 95       	ret

00000318 <LCD_voidDisplayChar>:
 318:	cf 93       	push	r28
 31a:	c8 2f       	mov	r28, r24
 31c:	41 e0       	ldi	r20, 0x01	; 1
 31e:	60 e0       	ldi	r22, 0x00	; 0
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	0e 94 42 04 	call	0x884	; 0x884 <DIO_voidSetPinValue>
 326:	40 e0       	ldi	r20, 0x00	; 0
 328:	61 e0       	ldi	r22, 0x01	; 1
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	0e 94 42 04 	call	0x884	; 0x884 <DIO_voidSetPinValue>
 330:	8c 2f       	mov	r24, r28
 332:	82 95       	swap	r24
 334:	8f 70       	andi	r24, 0x0F	; 15
 336:	0e 94 3d 01 	call	0x27a	; 0x27a <PRV_voidWriteHalfPort>
 33a:	0e 94 75 01 	call	0x2ea	; 0x2ea <PRV_voidEnableTriggerWrite>
 33e:	8c 2f       	mov	r24, r28
 340:	0e 94 3d 01 	call	0x27a	; 0x27a <PRV_voidWriteHalfPort>
 344:	0e 94 75 01 	call	0x2ea	; 0x2ea <PRV_voidEnableTriggerWrite>
 348:	cf 91       	pop	r28
 34a:	08 95       	ret

0000034c <LCD_voidSendCommand>:
 34c:	cf 93       	push	r28
 34e:	c8 2f       	mov	r28, r24
 350:	40 e0       	ldi	r20, 0x00	; 0
 352:	60 e0       	ldi	r22, 0x00	; 0
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	0e 94 42 04 	call	0x884	; 0x884 <DIO_voidSetPinValue>
 35a:	40 e0       	ldi	r20, 0x00	; 0
 35c:	61 e0       	ldi	r22, 0x01	; 1
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	0e 94 42 04 	call	0x884	; 0x884 <DIO_voidSetPinValue>
 364:	8c 2f       	mov	r24, r28
 366:	82 95       	swap	r24
 368:	8f 70       	andi	r24, 0x0F	; 15
 36a:	0e 94 3d 01 	call	0x27a	; 0x27a <PRV_voidWriteHalfPort>
 36e:	0e 94 75 01 	call	0x2ea	; 0x2ea <PRV_voidEnableTriggerWrite>
 372:	8c 2f       	mov	r24, r28
 374:	0e 94 3d 01 	call	0x27a	; 0x27a <PRV_voidWriteHalfPort>
 378:	0e 94 75 01 	call	0x2ea	; 0x2ea <PRV_voidEnableTriggerWrite>
 37c:	cf 91       	pop	r28
 37e:	08 95       	ret

00000380 <LCD_voidInit>:
 380:	41 e0       	ldi	r20, 0x01	; 1
 382:	60 e0       	ldi	r22, 0x00	; 0
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	0e 94 c0 03 	call	0x780	; 0x780 <DIO_voidSetPinDirection>
 38a:	41 e0       	ldi	r20, 0x01	; 1
 38c:	61 e0       	ldi	r22, 0x01	; 1
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	0e 94 c0 03 	call	0x780	; 0x780 <DIO_voidSetPinDirection>
 394:	41 e0       	ldi	r20, 0x01	; 1
 396:	62 e0       	ldi	r22, 0x02	; 2
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	0e 94 c0 03 	call	0x780	; 0x780 <DIO_voidSetPinDirection>
 39e:	41 e0       	ldi	r20, 0x01	; 1
 3a0:	64 e0       	ldi	r22, 0x04	; 4
 3a2:	82 e0       	ldi	r24, 0x02	; 2
 3a4:	0e 94 c0 03 	call	0x780	; 0x780 <DIO_voidSetPinDirection>
 3a8:	41 e0       	ldi	r20, 0x01	; 1
 3aa:	65 e0       	ldi	r22, 0x05	; 5
 3ac:	82 e0       	ldi	r24, 0x02	; 2
 3ae:	0e 94 c0 03 	call	0x780	; 0x780 <DIO_voidSetPinDirection>
 3b2:	41 e0       	ldi	r20, 0x01	; 1
 3b4:	66 e0       	ldi	r22, 0x06	; 6
 3b6:	82 e0       	ldi	r24, 0x02	; 2
 3b8:	0e 94 c0 03 	call	0x780	; 0x780 <DIO_voidSetPinDirection>
 3bc:	41 e0       	ldi	r20, 0x01	; 1
 3be:	67 e0       	ldi	r22, 0x07	; 7
 3c0:	82 e0       	ldi	r24, 0x02	; 2
 3c2:	0e 94 c0 03 	call	0x780	; 0x780 <DIO_voidSetPinDirection>
 3c6:	2f eb       	ldi	r18, 0xBF	; 191
 3c8:	8a ed       	ldi	r24, 0xDA	; 218
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	21 50       	subi	r18, 0x01	; 1
 3ce:	80 40       	sbci	r24, 0x00	; 0
 3d0:	90 40       	sbci	r25, 0x00	; 0
 3d2:	e1 f7       	brne	.-8      	; 0x3cc <LCD_voidInit+0x4c>
 3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <LCD_voidInit+0x56>
 3d6:	00 00       	nop
 3d8:	40 e0       	ldi	r20, 0x00	; 0
 3da:	60 e0       	ldi	r22, 0x00	; 0
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	0e 94 42 04 	call	0x884	; 0x884 <DIO_voidSetPinValue>
 3e2:	40 e0       	ldi	r20, 0x00	; 0
 3e4:	61 e0       	ldi	r22, 0x01	; 1
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	0e 94 42 04 	call	0x884	; 0x884 <DIO_voidSetPinValue>
 3ec:	82 e0       	ldi	r24, 0x02	; 2
 3ee:	0e 94 3d 01 	call	0x27a	; 0x27a <PRV_voidWriteHalfPort>
 3f2:	0e 94 75 01 	call	0x2ea	; 0x2ea <PRV_voidEnableTriggerWrite>
 3f6:	88 e2       	ldi	r24, 0x28	; 40
 3f8:	0e 94 a6 01 	call	0x34c	; 0x34c <LCD_voidSendCommand>
 3fc:	28 e7       	ldi	r18, 0x78	; 120
 3fe:	2a 95       	dec	r18
 400:	f1 f7       	brne	.-4      	; 0x3fe <LCD_voidInit+0x7e>
 402:	8f e0       	ldi	r24, 0x0F	; 15
 404:	0e 94 a6 01 	call	0x34c	; 0x34c <LCD_voidSendCommand>
 408:	88 e7       	ldi	r24, 0x78	; 120
 40a:	8a 95       	dec	r24
 40c:	f1 f7       	brne	.-4      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	0e 94 a6 01 	call	0x34c	; 0x34c <LCD_voidSendCommand>
 414:	8f e9       	ldi	r24, 0x9F	; 159
 416:	9f e0       	ldi	r25, 0x0F	; 15
 418:	01 97       	sbiw	r24, 0x01	; 1
 41a:	f1 f7       	brne	.-4      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 41c:	00 c0       	rjmp	.+0      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 41e:	00 00       	nop
 420:	86 e0       	ldi	r24, 0x06	; 6
 422:	0e 94 a6 01 	call	0x34c	; 0x34c <LCD_voidSendCommand>
 426:	08 95       	ret

00000428 <LCD_voidDisplayString>:
 428:	0f 93       	push	r16
 42a:	1f 93       	push	r17
 42c:	cf 93       	push	r28
 42e:	00 97       	sbiw	r24, 0x00	; 0
 430:	29 f4       	brne	.+10     	; 0x43c <LCD_voidDisplayString+0x14>
 432:	0c c0       	rjmp	.+24     	; 0x44c <LCD_voidDisplayString+0x24>
 434:	0e 94 8c 01 	call	0x318	; 0x318 <LCD_voidDisplayChar>
 438:	cf 5f       	subi	r28, 0xFF	; 255
 43a:	02 c0       	rjmp	.+4      	; 0x440 <LCD_voidDisplayString+0x18>
 43c:	8c 01       	movw	r16, r24
 43e:	c0 e0       	ldi	r28, 0x00	; 0
 440:	f8 01       	movw	r30, r16
 442:	ec 0f       	add	r30, r28
 444:	f1 1d       	adc	r31, r1
 446:	80 81       	ld	r24, Z
 448:	81 11       	cpse	r24, r1
 44a:	f4 cf       	rjmp	.-24     	; 0x434 <LCD_voidDisplayString+0xc>
 44c:	cf 91       	pop	r28
 44e:	1f 91       	pop	r17
 450:	0f 91       	pop	r16
 452:	08 95       	ret

00000454 <LCD_voidClear>:
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	0e 94 a6 01 	call	0x34c	; 0x34c <LCD_voidSendCommand>
 45a:	8f e9       	ldi	r24, 0x9F	; 159
 45c:	9f e0       	ldi	r25, 0x0F	; 15
 45e:	01 97       	sbiw	r24, 0x01	; 1
 460:	f1 f7       	brne	.-4      	; 0x45e <LCD_voidClear+0xa>
 462:	00 c0       	rjmp	.+0      	; 0x464 <LCD_voidClear+0x10>
 464:	00 00       	nop
 466:	08 95       	ret

00000468 <LCD_voidDisplayNumber>:
		_delay_us(45);
		break;
	}
}
void LCD_voidDisplayNumber(s32 copy_s32Number)
{
 468:	8f 92       	push	r8
 46a:	9f 92       	push	r9
 46c:	af 92       	push	r10
 46e:	bf 92       	push	r11
 470:	cf 92       	push	r12
 472:	df 92       	push	r13
 474:	ef 92       	push	r14
 476:	ff 92       	push	r15
 478:	6b 01       	movw	r12, r22
 47a:	7c 01       	movw	r14, r24
	u32 local_u32ReversedNumber = 1;
	u8 isNegative = 0;

	// Check if the number is negative
	if (copy_s32Number < 0)
 47c:	99 23       	and	r25, r25
 47e:	54 f4       	brge	.+20     	; 0x494 <LCD_voidDisplayNumber+0x2c>
	{
		isNegative = 1;  // Mark that the number is negative
		copy_s32Number = -copy_s32Number;  // Convert to positive for processing
 480:	f0 94       	com	r15
 482:	e0 94       	com	r14
 484:	d0 94       	com	r13
 486:	c0 94       	com	r12
 488:	c1 1c       	adc	r12, r1
 48a:	d1 1c       	adc	r13, r1
 48c:	e1 1c       	adc	r14, r1
 48e:	f1 1c       	adc	r15, r1
	u8 isNegative = 0;

	// Check if the number is negative
	if (copy_s32Number < 0)
	{
		isNegative = 1;  // Mark that the number is negative
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	01 c0       	rjmp	.+2      	; 0x496 <LCD_voidDisplayNumber+0x2e>
	}
}
void LCD_voidDisplayNumber(s32 copy_s32Number)
{
	u32 local_u32ReversedNumber = 1;
	u8 isNegative = 0;
 494:	80 e0       	ldi	r24, 0x00	; 0
		isNegative = 1;  // Mark that the number is negative
		copy_s32Number = -copy_s32Number;  // Convert to positive for processing
	}

	// Special case: if the number is 0, display '0'
	if(copy_s32Number == 0)
 496:	c1 14       	cp	r12, r1
 498:	d1 04       	cpc	r13, r1
 49a:	e1 04       	cpc	r14, r1
 49c:	f1 04       	cpc	r15, r1
 49e:	21 f4       	brne	.+8      	; 0x4a8 <LCD_voidDisplayNumber+0x40>
	{
		LCD_voidDisplayChar('0');
 4a0:	80 e3       	ldi	r24, 0x30	; 48
 4a2:	0e 94 8c 01 	call	0x318	; 0x318 <LCD_voidDisplayChar>
 4a6:	4a c0       	rjmp	.+148    	; 0x53c <LCD_voidDisplayNumber+0xd4>
	}
	else
	{
		// If the number is negative, display the '-' sign first
		if (isNegative)
 4a8:	88 23       	and	r24, r24
 4aa:	19 f0       	breq	.+6      	; 0x4b2 <LCD_voidDisplayNumber+0x4a>
		{
			LCD_voidDisplayChar('-');
 4ac:	8d e2       	ldi	r24, 0x2D	; 45
 4ae:	0e 94 8c 01 	call	0x318	; 0x318 <LCD_voidDisplayChar>
	u8 isNegative = 0;

	// Check if the number is negative
	if (copy_s32Number < 0)
	{
		isNegative = 1;  // Mark that the number is negative
 4b2:	61 e0       	ldi	r22, 0x01	; 1
 4b4:	70 e0       	ldi	r23, 0x00	; 0
 4b6:	80 e0       	ldi	r24, 0x00	; 0
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	24 c0       	rjmp	.+72     	; 0x504 <LCD_voidDisplayNumber+0x9c>
		}

		// Reverse the number for correct display
		while(copy_s32Number != 0)
		{
			local_u32ReversedNumber = (local_u32ReversedNumber * 10) + (copy_s32Number % 10);
 4bc:	dc 01       	movw	r26, r24
 4be:	cb 01       	movw	r24, r22
 4c0:	88 0f       	add	r24, r24
 4c2:	99 1f       	adc	r25, r25
 4c4:	aa 1f       	adc	r26, r26
 4c6:	bb 1f       	adc	r27, r27
 4c8:	4c 01       	movw	r8, r24
 4ca:	5d 01       	movw	r10, r26
 4cc:	88 0c       	add	r8, r8
 4ce:	99 1c       	adc	r9, r9
 4d0:	aa 1c       	adc	r10, r10
 4d2:	bb 1c       	adc	r11, r11
 4d4:	88 0c       	add	r8, r8
 4d6:	99 1c       	adc	r9, r9
 4d8:	aa 1c       	adc	r10, r10
 4da:	bb 1c       	adc	r11, r11
 4dc:	88 0e       	add	r8, r24
 4de:	99 1e       	adc	r9, r25
 4e0:	aa 1e       	adc	r10, r26
 4e2:	bb 1e       	adc	r11, r27
 4e4:	c7 01       	movw	r24, r14
 4e6:	b6 01       	movw	r22, r12
 4e8:	2a e0       	ldi	r18, 0x0A	; 10
 4ea:	30 e0       	ldi	r19, 0x00	; 0
 4ec:	40 e0       	ldi	r20, 0x00	; 0
 4ee:	50 e0       	ldi	r21, 0x00	; 0
 4f0:	0e 94 69 05 	call	0xad2	; 0xad2 <__divmodsi4>
 4f4:	68 0d       	add	r22, r8
 4f6:	79 1d       	adc	r23, r9
 4f8:	8a 1d       	adc	r24, r10
 4fa:	9b 1d       	adc	r25, r11
			copy_s32Number /= 10;
 4fc:	c2 2e       	mov	r12, r18
 4fe:	d3 2e       	mov	r13, r19
 500:	e4 2e       	mov	r14, r20
 502:	f5 2e       	mov	r15, r21
		{
			LCD_voidDisplayChar('-');
		}

		// Reverse the number for correct display
		while(copy_s32Number != 0)
 504:	c1 14       	cp	r12, r1
 506:	d1 04       	cpc	r13, r1
 508:	e1 04       	cpc	r14, r1
 50a:	f1 04       	cpc	r15, r1
 50c:	b9 f6       	brne	.-82     	; 0x4bc <LCD_voidDisplayNumber+0x54>
			local_u32ReversedNumber = (local_u32ReversedNumber * 10) + (copy_s32Number % 10);
			copy_s32Number /= 10;
		}
		do
		{
			LCD_voidDisplayChar((local_u32ReversedNumber % 10) + '0');
 50e:	2a e0       	ldi	r18, 0x0A	; 10
 510:	30 e0       	ldi	r19, 0x00	; 0
 512:	40 e0       	ldi	r20, 0x00	; 0
 514:	50 e0       	ldi	r21, 0x00	; 0
 516:	0e 94 47 05 	call	0xa8e	; 0xa8e <__udivmodsi4>
 51a:	c2 2e       	mov	r12, r18
 51c:	d3 2e       	mov	r13, r19
 51e:	e4 2e       	mov	r14, r20
 520:	f5 2e       	mov	r15, r21
 522:	80 e3       	ldi	r24, 0x30	; 48
 524:	86 0f       	add	r24, r22
 526:	0e 94 8c 01 	call	0x318	; 0x318 <LCD_voidDisplayChar>
			local_u32ReversedNumber /= 10;
 52a:	6c 2d       	mov	r22, r12
 52c:	7d 2d       	mov	r23, r13
 52e:	8e 2d       	mov	r24, r14
 530:	9f 2d       	mov	r25, r15
		} while (local_u32ReversedNumber != 1);
 532:	61 30       	cpi	r22, 0x01	; 1
 534:	71 05       	cpc	r23, r1
 536:	81 05       	cpc	r24, r1
 538:	91 05       	cpc	r25, r1
 53a:	49 f7       	brne	.-46     	; 0x50e <LCD_voidDisplayNumber+0xa6>
	}
}
 53c:	ff 90       	pop	r15
 53e:	ef 90       	pop	r14
 540:	df 90       	pop	r13
 542:	cf 90       	pop	r12
 544:	bf 90       	pop	r11
 546:	af 90       	pop	r10
 548:	9f 90       	pop	r9
 54a:	8f 90       	pop	r8
 54c:	08 95       	ret

0000054e <LCD_voidGoToSpecificPosition>:


void LCD_voidGoToSpecificPosition(u8 copy_u8LineNumber, u8 copy_u8Position)
{
	switch(copy_u8LineNumber)
 54e:	88 23       	and	r24, r24
 550:	19 f0       	breq	.+6      	; 0x558 <LCD_voidGoToSpecificPosition+0xa>
 552:	81 30       	cpi	r24, 0x01	; 1
 554:	49 f0       	breq	.+18     	; 0x568 <LCD_voidGoToSpecificPosition+0x1a>
 556:	08 95       	ret
	{
	case LCD_LINE_ONE:
		LCD_voidSendCommand(0b10000000+copy_u8Position); //0x80+copy_u8Position
 558:	80 e8       	ldi	r24, 0x80	; 128
 55a:	86 0f       	add	r24, r22
 55c:	0e 94 a6 01 	call	0x34c	; 0x34c <LCD_voidSendCommand>
 560:	88 e7       	ldi	r24, 0x78	; 120
 562:	8a 95       	dec	r24
 564:	f1 f7       	brne	.-4      	; 0x562 <LCD_voidGoToSpecificPosition+0x14>
 566:	08 95       	ret
		_delay_us(45);
		break;

	case LCD_LINE_TWO:
		LCD_voidSendCommand(0b11000000+copy_u8Position); //0xC0+copy_u8Position
 568:	80 ec       	ldi	r24, 0xC0	; 192
 56a:	86 0f       	add	r24, r22
 56c:	0e 94 a6 01 	call	0x34c	; 0x34c <LCD_voidSendCommand>
 570:	88 e7       	ldi	r24, 0x78	; 120
 572:	8a 95       	dec	r24
 574:	f1 f7       	brne	.-4      	; 0x572 <LCD_voidGoToSpecificPosition+0x24>
 576:	08 95       	ret

00000578 <voidDecoderCalc>:
		
    }
	
}

void voidDecoderCalc(u8 u8_input_string[], s32 *s32_output) {
 578:	4f 92       	push	r4
 57a:	5f 92       	push	r5
 57c:	6f 92       	push	r6
 57e:	7f 92       	push	r7
 580:	8f 92       	push	r8
 582:	9f 92       	push	r9
 584:	bf 92       	push	r11
 586:	cf 92       	push	r12
 588:	df 92       	push	r13
 58a:	ef 92       	push	r14
 58c:	ff 92       	push	r15
 58e:	1f 93       	push	r17
 590:	cf 93       	push	r28
 592:	df 93       	push	r29
 594:	ec 01       	movw	r28, r24
 596:	4b 01       	movw	r8, r22
	s32 num = 0;
	s32 sum = 0;
	char current_operator = '+';
	
	// Handle the first character being a negative sign
	if (u8_input_string[0] == '-') {
 598:	88 81       	ld	r24, Y
 59a:	8d 32       	cpi	r24, 0x2D	; 45
 59c:	19 f0       	breq	.+6      	; 0x5a4 <voidDecoderCalc+0x2c>

void voidDecoderCalc(u8 u8_input_string[], s32 *s32_output) {
	u8 counter = 0;
	s32 num = 0;
	s32 sum = 0;
	char current_operator = '+';
 59e:	2b e2       	ldi	r18, 0x2B	; 43
    }
	
}

void voidDecoderCalc(u8 u8_input_string[], s32 *s32_output) {
	u8 counter = 0;
 5a0:	b1 2c       	mov	r11, r1
 5a2:	03 c0       	rjmp	.+6      	; 0x5aa <voidDecoderCalc+0x32>
	s32 sum = 0;
	char current_operator = '+';
	
	// Handle the first character being a negative sign
	if (u8_input_string[0] == '-') {
		current_operator = '-';
 5a4:	2d e2       	ldi	r18, 0x2D	; 45
		counter++;
 5a6:	bb 24       	eor	r11, r11
 5a8:	b3 94       	inc	r11
 5aa:	41 2c       	mov	r4, r1
 5ac:	51 2c       	mov	r5, r1
 5ae:	32 01       	movw	r6, r4
 5b0:	5b c0       	rjmp	.+182    	; 0x668 <voidDecoderCalc+0xf0>
	while (u8_input_string[counter] != '\0') {
		num = 0;
		
		// Convert consecutive digits into a number
		while (u8_input_string[counter] >= '0' && u8_input_string[counter] <= '9') {
			num = num * 10 + (u8_input_string[counter] - '0');
 5b2:	d7 01       	movw	r26, r14
 5b4:	c6 01       	movw	r24, r12
 5b6:	88 0f       	add	r24, r24
 5b8:	99 1f       	adc	r25, r25
 5ba:	aa 1f       	adc	r26, r26
 5bc:	bb 1f       	adc	r27, r27
 5be:	6c 01       	movw	r12, r24
 5c0:	7d 01       	movw	r14, r26
 5c2:	cc 0c       	add	r12, r12
 5c4:	dd 1c       	adc	r13, r13
 5c6:	ee 1c       	adc	r14, r14
 5c8:	ff 1c       	adc	r15, r15
 5ca:	cc 0c       	add	r12, r12
 5cc:	dd 1c       	adc	r13, r13
 5ce:	ee 1c       	adc	r14, r14
 5d0:	ff 1c       	adc	r15, r15
 5d2:	8c 0d       	add	r24, r12
 5d4:	9d 1d       	adc	r25, r13
 5d6:	ae 1d       	adc	r26, r14
 5d8:	bf 1d       	adc	r27, r15
 5da:	41 2f       	mov	r20, r17
 5dc:	50 e0       	ldi	r21, 0x00	; 0
 5de:	6a 01       	movw	r12, r20
 5e0:	30 e3       	ldi	r19, 0x30	; 48
 5e2:	c3 1a       	sub	r12, r19
 5e4:	d1 08       	sbc	r13, r1
 5e6:	0d 2c       	mov	r0, r13
 5e8:	00 0c       	add	r0, r0
 5ea:	ee 08       	sbc	r14, r14
 5ec:	ff 08       	sbc	r15, r15
 5ee:	c8 0e       	add	r12, r24
 5f0:	d9 1e       	adc	r13, r25
 5f2:	ea 1e       	adc	r14, r26
 5f4:	fb 1e       	adc	r15, r27
			counter++;
 5f6:	b3 94       	inc	r11
 5f8:	03 c0       	rjmp	.+6      	; 0x600 <voidDecoderCalc+0x88>
 5fa:	c1 2c       	mov	r12, r1
 5fc:	d1 2c       	mov	r13, r1
 5fe:	76 01       	movw	r14, r12
	// Loop through the input string
	while (u8_input_string[counter] != '\0') {
		num = 0;
		
		// Convert consecutive digits into a number
		while (u8_input_string[counter] >= '0' && u8_input_string[counter] <= '9') {
 600:	fe 01       	movw	r30, r28
 602:	eb 0d       	add	r30, r11
 604:	f1 1d       	adc	r31, r1
 606:	10 81       	ld	r17, Z
 608:	80 ed       	ldi	r24, 0xD0	; 208
 60a:	81 0f       	add	r24, r17
 60c:	8a 30       	cpi	r24, 0x0A	; 10
 60e:	88 f2       	brcs	.-94     	; 0x5b2 <voidDecoderCalc+0x3a>
			num = num * 10 + (u8_input_string[counter] - '0');
			counter++;
		}
		
		// Apply the current operator
		switch (current_operator) {
 610:	2b 32       	cpi	r18, 0x2B	; 43
 612:	f9 f0       	breq	.+62     	; 0x652 <voidDecoderCalc+0xda>
 614:	18 f4       	brcc	.+6      	; 0x61c <voidDecoderCalc+0xa4>
 616:	2a 32       	cpi	r18, 0x2A	; 42
 618:	99 f0       	breq	.+38     	; 0x640 <voidDecoderCalc+0xc8>
 61a:	24 c0       	rjmp	.+72     	; 0x664 <voidDecoderCalc+0xec>
 61c:	2d 32       	cpi	r18, 0x2D	; 45
 61e:	f1 f0       	breq	.+60     	; 0x65c <voidDecoderCalc+0xe4>
 620:	2f 32       	cpi	r18, 0x2F	; 47
 622:	01 f5       	brne	.+64     	; 0x664 <voidDecoderCalc+0xec>
			case '/':
				if (num != 0) {  // Prevent division by zero
 624:	c1 14       	cp	r12, r1
 626:	d1 04       	cpc	r13, r1
 628:	e1 04       	cpc	r14, r1
 62a:	f1 04       	cpc	r15, r1
 62c:	d9 f0       	breq	.+54     	; 0x664 <voidDecoderCalc+0xec>
					sum /= num;
 62e:	c3 01       	movw	r24, r6
 630:	b2 01       	movw	r22, r4
 632:	a7 01       	movw	r20, r14
 634:	96 01       	movw	r18, r12
 636:	0e 94 69 05 	call	0xad2	; 0xad2 <__divmodsi4>
 63a:	29 01       	movw	r4, r18
 63c:	3a 01       	movw	r6, r20
 63e:	12 c0       	rjmp	.+36     	; 0x664 <voidDecoderCalc+0xec>
					}
			break;
			case '*':
				sum *= num;
 640:	a3 01       	movw	r20, r6
 642:	92 01       	movw	r18, r4
 644:	c7 01       	movw	r24, r14
 646:	b6 01       	movw	r22, r12
 648:	0e 94 37 05 	call	0xa6e	; 0xa6e <__mulsi3>
 64c:	2b 01       	movw	r4, r22
 64e:	3c 01       	movw	r6, r24
				break;
 650:	09 c0       	rjmp	.+18     	; 0x664 <voidDecoderCalc+0xec>
			case '+':
				sum += num;
 652:	4c 0c       	add	r4, r12
 654:	5d 1c       	adc	r5, r13
 656:	6e 1c       	adc	r6, r14
 658:	7f 1c       	adc	r7, r15
				break;
 65a:	04 c0       	rjmp	.+8      	; 0x664 <voidDecoderCalc+0xec>
			case '-':
				sum -= num;
 65c:	4c 18       	sub	r4, r12
 65e:	5d 08       	sbc	r5, r13
 660:	6e 08       	sbc	r6, r14
 662:	7f 08       	sbc	r7, r15
			break;
		}

		// Move to the next operator
		current_operator = u8_input_string[counter];
		counter++;
 664:	b3 94       	inc	r11
			default:
			break;
		}

		// Move to the next operator
		current_operator = u8_input_string[counter];
 666:	21 2f       	mov	r18, r17
		current_operator = '-';
		counter++;
	}
	
	// Loop through the input string
	while (u8_input_string[counter] != '\0') {
 668:	fe 01       	movw	r30, r28
 66a:	eb 0d       	add	r30, r11
 66c:	f1 1d       	adc	r31, r1
 66e:	80 81       	ld	r24, Z
 670:	81 11       	cpse	r24, r1
 672:	c3 cf       	rjmp	.-122    	; 0x5fa <voidDecoderCalc+0x82>
		current_operator = u8_input_string[counter];
		counter++;
	}

	// Write the result to the output
	*s32_output = sum;
 674:	f4 01       	movw	r30, r8
 676:	40 82       	st	Z, r4
 678:	51 82       	std	Z+1, r5	; 0x01
 67a:	62 82       	std	Z+2, r6	; 0x02
 67c:	73 82       	std	Z+3, r7	; 0x03
}
 67e:	df 91       	pop	r29
 680:	cf 91       	pop	r28
 682:	1f 91       	pop	r17
 684:	ff 90       	pop	r15
 686:	ef 90       	pop	r14
 688:	df 90       	pop	r13
 68a:	cf 90       	pop	r12
 68c:	bf 90       	pop	r11
 68e:	9f 90       	pop	r9
 690:	8f 90       	pop	r8
 692:	7f 90       	pop	r7
 694:	6f 90       	pop	r6
 696:	5f 90       	pop	r5
 698:	4f 90       	pop	r4
 69a:	08 95       	ret

0000069c <main>:
#define MAX_ARRAY_SIZE 17

void voidDecoderCalc(u8 u8_input_string[], s32 *s32_output);

int main(void)
{
 69c:	cf 93       	push	r28
 69e:	df 93       	push	r29
 6a0:	cd b7       	in	r28, 0x3d	; 61
 6a2:	de b7       	in	r29, 0x3e	; 62
 6a4:	66 97       	sbiw	r28, 0x16	; 22
 6a6:	0f b6       	in	r0, 0x3f	; 63
 6a8:	f8 94       	cli
 6aa:	de bf       	out	0x3e, r29	; 62
 6ac:	0f be       	out	0x3f, r0	; 63
 6ae:	cd bf       	out	0x3d, r28	; 61
	
	KPD_voidInit();
 6b0:	0e 94 41 00 	call	0x82	; 0x82 <KPD_voidInit>
	LCD_voidInit();
 6b4:	0e 94 c0 01 	call	0x380	; 0x380 <LCD_voidInit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6b8:	8f e5       	ldi	r24, 0x5F	; 95
 6ba:	9a ee       	ldi	r25, 0xEA	; 234
 6bc:	01 97       	sbiw	r24, 0x01	; 1
 6be:	f1 f7       	brne	.-4      	; 0x6bc <main+0x20>
 6c0:	00 c0       	rjmp	.+0      	; 0x6c2 <main+0x26>
 6c2:	00 00       	nop
	
	_delay_ms(30);
	u8 keyPressed = KPD_NOT_PRESSED;
 6c4:	8f ef       	ldi	r24, 0xFF	; 255
 6c6:	89 83       	std	Y+1, r24	; 0x01
	u8 input[MAX_ARRAY_SIZE];
	s32 result = 0;
 6c8:	1b 8a       	std	Y+19, r1	; 0x13
 6ca:	1c 8a       	std	Y+20, r1	; 0x14
 6cc:	1d 8a       	std	Y+21, r1	; 0x15
 6ce:	1e 8a       	std	Y+22, r1	; 0x16
	//result[MAX_ARRAY_SIZE - 1] = '\0';
	u8 index = 0;
 6d0:	10 e0       	ldi	r17, 0x00	; 0
    while (1) 
    {
		
		KPD_voidGetValue(&keyPressed);
 6d2:	ce 01       	movw	r24, r28
 6d4:	01 96       	adiw	r24, 0x01	; 1
 6d6:	0e 94 8e 00 	call	0x11c	; 0x11c <KPD_voidGetValue>
		switch(keyPressed){
 6da:	89 81       	ldd	r24, Y+1	; 0x01
 6dc:	83 36       	cpi	r24, 0x63	; 99
 6de:	29 f0       	breq	.+10     	; 0x6ea <main+0x4e>
 6e0:	8f 3f       	cpi	r24, 0xFF	; 255
 6e2:	b9 f3       	breq	.-18     	; 0x6d2 <main+0x36>
 6e4:	8d 33       	cpi	r24, 0x3D	; 61
 6e6:	71 f5       	brne	.+92     	; 0x744 <main+0xa8>
 6e8:	0f c0       	rjmp	.+30     	; 0x708 <main+0x6c>
			case KPD_NOT_PRESSED:
				break;
			case 'c':
				LCD_voidClear();
 6ea:	0e 94 2a 02 	call	0x454	; 0x454 <LCD_voidClear>
				index = 0;
				memset(input, '\0', MAX_ARRAY_SIZE);
 6ee:	fe 01       	movw	r30, r28
 6f0:	32 96       	adiw	r30, 0x02	; 2
 6f2:	81 e1       	ldi	r24, 0x11	; 17
 6f4:	df 01       	movw	r26, r30
 6f6:	1d 92       	st	X+, r1
 6f8:	8a 95       	dec	r24
 6fa:	e9 f7       	brne	.-6      	; 0x6f6 <main+0x5a>
				result = 0;
 6fc:	1b 8a       	std	Y+19, r1	; 0x13
 6fe:	1c 8a       	std	Y+20, r1	; 0x14
 700:	1d 8a       	std	Y+21, r1	; 0x15
 702:	1e 8a       	std	Y+22, r1	; 0x16
		switch(keyPressed){
			case KPD_NOT_PRESSED:
				break;
			case 'c':
				LCD_voidClear();
				index = 0;
 704:	10 e0       	ldi	r17, 0x00	; 0
				memset(input, '\0', MAX_ARRAY_SIZE);
				result = 0;
				//memset(result, '\0', MAX_ARRAY_SIZE);
				break;
 706:	e5 cf       	rjmp	.-54     	; 0x6d2 <main+0x36>
			case '=':
				voidDecoderCalc(input, &result);
 708:	be 01       	movw	r22, r28
 70a:	6d 5e       	subi	r22, 0xED	; 237
 70c:	7f 4f       	sbci	r23, 0xFF	; 255
 70e:	ce 01       	movw	r24, r28
 710:	02 96       	adiw	r24, 0x02	; 2
 712:	0e 94 bc 02 	call	0x578	; 0x578 <voidDecoderCalc>
				LCD_voidGoToSpecificPosition(1, 0);
 716:	60 e0       	ldi	r22, 0x00	; 0
 718:	81 e0       	ldi	r24, 0x01	; 1
 71a:	0e 94 a7 02 	call	0x54e	; 0x54e <LCD_voidGoToSpecificPosition>
				LCD_voidDisplayString((u8 *)"                ");
 71e:	80 e7       	ldi	r24, 0x70	; 112
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	0e 94 14 02 	call	0x428	; 0x428 <LCD_voidDisplayString>
				LCD_voidGoToSpecificPosition(1, 0);
 726:	60 e0       	ldi	r22, 0x00	; 0
 728:	81 e0       	ldi	r24, 0x01	; 1
 72a:	0e 94 a7 02 	call	0x54e	; 0x54e <LCD_voidGoToSpecificPosition>
				LCD_voidDisplayNumber(result);
 72e:	6b 89       	ldd	r22, Y+19	; 0x13
 730:	7c 89       	ldd	r23, Y+20	; 0x14
 732:	8d 89       	ldd	r24, Y+21	; 0x15
 734:	9e 89       	ldd	r25, Y+22	; 0x16
 736:	0e 94 34 02 	call	0x468	; 0x468 <LCD_voidDisplayNumber>
				result = 0;
 73a:	1b 8a       	std	Y+19, r1	; 0x13
 73c:	1c 8a       	std	Y+20, r1	; 0x14
 73e:	1d 8a       	std	Y+21, r1	; 0x15
 740:	1e 8a       	std	Y+22, r1	; 0x16
				//memset(result, '\0', MAX_ARRAY_SIZE);
				break;
 742:	c7 cf       	rjmp	.-114    	; 0x6d2 <main+0x36>
			default:
				if((index < MAX_ARRAY_SIZE)){
 744:	11 31       	cpi	r17, 0x11	; 17
 746:	28 f6       	brcc	.-118    	; 0x6d2 <main+0x36>
					// inside the 16 digit bound
					input[index] = keyPressed;
 748:	21 2f       	mov	r18, r17
 74a:	30 e0       	ldi	r19, 0x00	; 0
 74c:	e2 e0       	ldi	r30, 0x02	; 2
 74e:	f0 e0       	ldi	r31, 0x00	; 0
 750:	ec 0f       	add	r30, r28
 752:	fd 1f       	adc	r31, r29
 754:	e2 0f       	add	r30, r18
 756:	f3 1f       	adc	r31, r19
 758:	80 83       	st	Z, r24
					input[index + 1] = '\0';
 75a:	2f 5f       	subi	r18, 0xFF	; 255
 75c:	3f 4f       	sbci	r19, 0xFF	; 255
 75e:	e2 e0       	ldi	r30, 0x02	; 2
 760:	f0 e0       	ldi	r31, 0x00	; 0
 762:	ec 0f       	add	r30, r28
 764:	fd 1f       	adc	r31, r29
 766:	e2 0f       	add	r30, r18
 768:	f3 1f       	adc	r31, r19
 76a:	10 82       	st	Z, r1
					index++;
 76c:	1f 5f       	subi	r17, 0xFF	; 255
					LCD_voidGoToSpecificPosition(0, 0);
 76e:	60 e0       	ldi	r22, 0x00	; 0
 770:	80 e0       	ldi	r24, 0x00	; 0
 772:	0e 94 a7 02 	call	0x54e	; 0x54e <LCD_voidGoToSpecificPosition>
					LCD_voidDisplayString(input);
 776:	ce 01       	movw	r24, r28
 778:	02 96       	adiw	r24, 0x02	; 2
 77a:	0e 94 14 02 	call	0x428	; 0x428 <LCD_voidDisplayString>
 77e:	a9 cf       	rjmp	.-174    	; 0x6d2 <main+0x36>

00000780 <DIO_voidSetPinDirection>:
		case DIO_PORTC:
			TOG_BIT(PORTC_REG, copy_u8PinId);
			break;

		case DIO_PORTD:
			TOG_BIT(PORTD_REG, copy_u8PinId);
 780:	84 30       	cpi	r24, 0x04	; 4
 782:	08 f0       	brcs	.+2      	; 0x786 <DIO_voidSetPinDirection+0x6>
 784:	7e c0       	rjmp	.+252    	; 0x882 <__stack+0x23>
 786:	68 30       	cpi	r22, 0x08	; 8
 788:	08 f0       	brcs	.+2      	; 0x78c <DIO_voidSetPinDirection+0xc>
 78a:	7b c0       	rjmp	.+246    	; 0x882 <__stack+0x23>
 78c:	42 30       	cpi	r20, 0x02	; 2
 78e:	08 f0       	brcs	.+2      	; 0x792 <DIO_voidSetPinDirection+0x12>
 790:	78 c0       	rjmp	.+240    	; 0x882 <__stack+0x23>
 792:	81 30       	cpi	r24, 0x01	; 1
 794:	19 f1       	breq	.+70     	; 0x7dc <DIO_voidSetPinDirection+0x5c>
 796:	30 f0       	brcs	.+12     	; 0x7a4 <DIO_voidSetPinDirection+0x24>
 798:	82 30       	cpi	r24, 0x02	; 2
 79a:	e1 f1       	breq	.+120    	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 79c:	83 30       	cpi	r24, 0x03	; 3
 79e:	09 f4       	brne	.+2      	; 0x7a2 <DIO_voidSetPinDirection+0x22>
 7a0:	55 c0       	rjmp	.+170    	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 7a2:	08 95       	ret
 7a4:	44 23       	and	r20, r20
 7a6:	19 f0       	breq	.+6      	; 0x7ae <DIO_voidSetPinDirection+0x2e>
 7a8:	41 30       	cpi	r20, 0x01	; 1
 7aa:	69 f0       	breq	.+26     	; 0x7c6 <DIO_voidSetPinDirection+0x46>
 7ac:	08 95       	ret
 7ae:	2a b3       	in	r18, 0x1a	; 26
 7b0:	81 e0       	ldi	r24, 0x01	; 1
 7b2:	90 e0       	ldi	r25, 0x00	; 0
 7b4:	02 c0       	rjmp	.+4      	; 0x7ba <DIO_voidSetPinDirection+0x3a>
 7b6:	88 0f       	add	r24, r24
 7b8:	99 1f       	adc	r25, r25
 7ba:	6a 95       	dec	r22
 7bc:	e2 f7       	brpl	.-8      	; 0x7b6 <DIO_voidSetPinDirection+0x36>
 7be:	80 95       	com	r24
 7c0:	82 23       	and	r24, r18
 7c2:	8a bb       	out	0x1a, r24	; 26
 7c4:	08 95       	ret
 7c6:	2a b3       	in	r18, 0x1a	; 26
 7c8:	81 e0       	ldi	r24, 0x01	; 1
 7ca:	90 e0       	ldi	r25, 0x00	; 0
 7cc:	02 c0       	rjmp	.+4      	; 0x7d2 <DIO_voidSetPinDirection+0x52>
 7ce:	88 0f       	add	r24, r24
 7d0:	99 1f       	adc	r25, r25
 7d2:	6a 95       	dec	r22
 7d4:	e2 f7       	brpl	.-8      	; 0x7ce <DIO_voidSetPinDirection+0x4e>
 7d6:	82 2b       	or	r24, r18
 7d8:	8a bb       	out	0x1a, r24	; 26
 7da:	08 95       	ret
 7dc:	44 23       	and	r20, r20
 7de:	19 f0       	breq	.+6      	; 0x7e6 <DIO_voidSetPinDirection+0x66>
 7e0:	41 30       	cpi	r20, 0x01	; 1
 7e2:	69 f0       	breq	.+26     	; 0x7fe <DIO_voidSetPinDirection+0x7e>
 7e4:	08 95       	ret
 7e6:	27 b3       	in	r18, 0x17	; 23
 7e8:	81 e0       	ldi	r24, 0x01	; 1
 7ea:	90 e0       	ldi	r25, 0x00	; 0
 7ec:	02 c0       	rjmp	.+4      	; 0x7f2 <DIO_voidSetPinDirection+0x72>
 7ee:	88 0f       	add	r24, r24
 7f0:	99 1f       	adc	r25, r25
 7f2:	6a 95       	dec	r22
 7f4:	e2 f7       	brpl	.-8      	; 0x7ee <DIO_voidSetPinDirection+0x6e>
 7f6:	80 95       	com	r24
 7f8:	82 23       	and	r24, r18
 7fa:	87 bb       	out	0x17, r24	; 23
 7fc:	08 95       	ret
 7fe:	27 b3       	in	r18, 0x17	; 23
 800:	81 e0       	ldi	r24, 0x01	; 1
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	02 c0       	rjmp	.+4      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 806:	88 0f       	add	r24, r24
 808:	99 1f       	adc	r25, r25
 80a:	6a 95       	dec	r22
 80c:	e2 f7       	brpl	.-8      	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 80e:	82 2b       	or	r24, r18
 810:	87 bb       	out	0x17, r24	; 23
 812:	08 95       	ret
 814:	44 23       	and	r20, r20
 816:	19 f0       	breq	.+6      	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 818:	41 30       	cpi	r20, 0x01	; 1
 81a:	69 f0       	breq	.+26     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 81c:	08 95       	ret
 81e:	24 b3       	in	r18, 0x14	; 20
 820:	81 e0       	ldi	r24, 0x01	; 1
 822:	90 e0       	ldi	r25, 0x00	; 0
 824:	02 c0       	rjmp	.+4      	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 826:	88 0f       	add	r24, r24
 828:	99 1f       	adc	r25, r25
 82a:	6a 95       	dec	r22
 82c:	e2 f7       	brpl	.-8      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 82e:	80 95       	com	r24
 830:	82 23       	and	r24, r18
 832:	84 bb       	out	0x14, r24	; 20
 834:	08 95       	ret
 836:	24 b3       	in	r18, 0x14	; 20
 838:	81 e0       	ldi	r24, 0x01	; 1
 83a:	90 e0       	ldi	r25, 0x00	; 0
 83c:	02 c0       	rjmp	.+4      	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 83e:	88 0f       	add	r24, r24
 840:	99 1f       	adc	r25, r25
 842:	6a 95       	dec	r22
 844:	e2 f7       	brpl	.-8      	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 846:	82 2b       	or	r24, r18
 848:	84 bb       	out	0x14, r24	; 20
 84a:	08 95       	ret
 84c:	44 23       	and	r20, r20
 84e:	19 f0       	breq	.+6      	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 850:	41 30       	cpi	r20, 0x01	; 1
 852:	69 f0       	breq	.+26     	; 0x86e <__stack+0xf>
 854:	08 95       	ret
 856:	21 b3       	in	r18, 0x11	; 17
 858:	81 e0       	ldi	r24, 0x01	; 1
 85a:	90 e0       	ldi	r25, 0x00	; 0
 85c:	02 c0       	rjmp	.+4      	; 0x862 <__stack+0x3>
 85e:	88 0f       	add	r24, r24
 860:	99 1f       	adc	r25, r25
 862:	6a 95       	dec	r22
 864:	e2 f7       	brpl	.-8      	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
 866:	80 95       	com	r24
 868:	82 23       	and	r24, r18
 86a:	81 bb       	out	0x11, r24	; 17
 86c:	08 95       	ret
 86e:	21 b3       	in	r18, 0x11	; 17
 870:	81 e0       	ldi	r24, 0x01	; 1
 872:	90 e0       	ldi	r25, 0x00	; 0
 874:	02 c0       	rjmp	.+4      	; 0x87a <__stack+0x1b>
 876:	88 0f       	add	r24, r24
 878:	99 1f       	adc	r25, r25
 87a:	6a 95       	dec	r22
 87c:	e2 f7       	brpl	.-8      	; 0x876 <__stack+0x17>
 87e:	82 2b       	or	r24, r18
 880:	81 bb       	out	0x11, r24	; 17
 882:	08 95       	ret

00000884 <DIO_voidSetPinValue>:
 884:	84 30       	cpi	r24, 0x04	; 4
 886:	08 f0       	brcs	.+2      	; 0x88a <DIO_voidSetPinValue+0x6>
 888:	7e c0       	rjmp	.+252    	; 0x986 <DIO_voidSetPinValue+0x102>
 88a:	68 30       	cpi	r22, 0x08	; 8
 88c:	08 f0       	brcs	.+2      	; 0x890 <DIO_voidSetPinValue+0xc>
 88e:	7b c0       	rjmp	.+246    	; 0x986 <DIO_voidSetPinValue+0x102>
 890:	42 30       	cpi	r20, 0x02	; 2
 892:	08 f0       	brcs	.+2      	; 0x896 <DIO_voidSetPinValue+0x12>
 894:	78 c0       	rjmp	.+240    	; 0x986 <DIO_voidSetPinValue+0x102>
 896:	81 30       	cpi	r24, 0x01	; 1
 898:	19 f1       	breq	.+70     	; 0x8e0 <DIO_voidSetPinValue+0x5c>
 89a:	30 f0       	brcs	.+12     	; 0x8a8 <DIO_voidSetPinValue+0x24>
 89c:	82 30       	cpi	r24, 0x02	; 2
 89e:	e1 f1       	breq	.+120    	; 0x918 <DIO_voidSetPinValue+0x94>
 8a0:	83 30       	cpi	r24, 0x03	; 3
 8a2:	09 f4       	brne	.+2      	; 0x8a6 <DIO_voidSetPinValue+0x22>
 8a4:	55 c0       	rjmp	.+170    	; 0x950 <DIO_voidSetPinValue+0xcc>
 8a6:	08 95       	ret
 8a8:	44 23       	and	r20, r20
 8aa:	19 f0       	breq	.+6      	; 0x8b2 <DIO_voidSetPinValue+0x2e>
 8ac:	41 30       	cpi	r20, 0x01	; 1
 8ae:	69 f0       	breq	.+26     	; 0x8ca <DIO_voidSetPinValue+0x46>
 8b0:	08 95       	ret
 8b2:	2b b3       	in	r18, 0x1b	; 27
 8b4:	81 e0       	ldi	r24, 0x01	; 1
 8b6:	90 e0       	ldi	r25, 0x00	; 0
 8b8:	02 c0       	rjmp	.+4      	; 0x8be <DIO_voidSetPinValue+0x3a>
 8ba:	88 0f       	add	r24, r24
 8bc:	99 1f       	adc	r25, r25
 8be:	6a 95       	dec	r22
 8c0:	e2 f7       	brpl	.-8      	; 0x8ba <DIO_voidSetPinValue+0x36>
 8c2:	80 95       	com	r24
 8c4:	82 23       	and	r24, r18
 8c6:	8b bb       	out	0x1b, r24	; 27
 8c8:	08 95       	ret
 8ca:	2b b3       	in	r18, 0x1b	; 27
 8cc:	81 e0       	ldi	r24, 0x01	; 1
 8ce:	90 e0       	ldi	r25, 0x00	; 0
 8d0:	02 c0       	rjmp	.+4      	; 0x8d6 <DIO_voidSetPinValue+0x52>
 8d2:	88 0f       	add	r24, r24
 8d4:	99 1f       	adc	r25, r25
 8d6:	6a 95       	dec	r22
 8d8:	e2 f7       	brpl	.-8      	; 0x8d2 <DIO_voidSetPinValue+0x4e>
 8da:	82 2b       	or	r24, r18
 8dc:	8b bb       	out	0x1b, r24	; 27
 8de:	08 95       	ret
 8e0:	44 23       	and	r20, r20
 8e2:	19 f0       	breq	.+6      	; 0x8ea <DIO_voidSetPinValue+0x66>
 8e4:	41 30       	cpi	r20, 0x01	; 1
 8e6:	69 f0       	breq	.+26     	; 0x902 <DIO_voidSetPinValue+0x7e>
 8e8:	08 95       	ret
 8ea:	28 b3       	in	r18, 0x18	; 24
 8ec:	81 e0       	ldi	r24, 0x01	; 1
 8ee:	90 e0       	ldi	r25, 0x00	; 0
 8f0:	02 c0       	rjmp	.+4      	; 0x8f6 <DIO_voidSetPinValue+0x72>
 8f2:	88 0f       	add	r24, r24
 8f4:	99 1f       	adc	r25, r25
 8f6:	6a 95       	dec	r22
 8f8:	e2 f7       	brpl	.-8      	; 0x8f2 <DIO_voidSetPinValue+0x6e>
 8fa:	80 95       	com	r24
 8fc:	82 23       	and	r24, r18
 8fe:	88 bb       	out	0x18, r24	; 24
 900:	08 95       	ret
 902:	28 b3       	in	r18, 0x18	; 24
 904:	81 e0       	ldi	r24, 0x01	; 1
 906:	90 e0       	ldi	r25, 0x00	; 0
 908:	02 c0       	rjmp	.+4      	; 0x90e <DIO_voidSetPinValue+0x8a>
 90a:	88 0f       	add	r24, r24
 90c:	99 1f       	adc	r25, r25
 90e:	6a 95       	dec	r22
 910:	e2 f7       	brpl	.-8      	; 0x90a <DIO_voidSetPinValue+0x86>
 912:	82 2b       	or	r24, r18
 914:	88 bb       	out	0x18, r24	; 24
 916:	08 95       	ret
 918:	44 23       	and	r20, r20
 91a:	19 f0       	breq	.+6      	; 0x922 <DIO_voidSetPinValue+0x9e>
 91c:	41 30       	cpi	r20, 0x01	; 1
 91e:	69 f0       	breq	.+26     	; 0x93a <DIO_voidSetPinValue+0xb6>
 920:	08 95       	ret
 922:	25 b3       	in	r18, 0x15	; 21
 924:	81 e0       	ldi	r24, 0x01	; 1
 926:	90 e0       	ldi	r25, 0x00	; 0
 928:	02 c0       	rjmp	.+4      	; 0x92e <DIO_voidSetPinValue+0xaa>
 92a:	88 0f       	add	r24, r24
 92c:	99 1f       	adc	r25, r25
 92e:	6a 95       	dec	r22
 930:	e2 f7       	brpl	.-8      	; 0x92a <DIO_voidSetPinValue+0xa6>
 932:	80 95       	com	r24
 934:	82 23       	and	r24, r18
 936:	85 bb       	out	0x15, r24	; 21
 938:	08 95       	ret
 93a:	25 b3       	in	r18, 0x15	; 21
 93c:	81 e0       	ldi	r24, 0x01	; 1
 93e:	90 e0       	ldi	r25, 0x00	; 0
 940:	02 c0       	rjmp	.+4      	; 0x946 <DIO_voidSetPinValue+0xc2>
 942:	88 0f       	add	r24, r24
 944:	99 1f       	adc	r25, r25
 946:	6a 95       	dec	r22
 948:	e2 f7       	brpl	.-8      	; 0x942 <DIO_voidSetPinValue+0xbe>
 94a:	82 2b       	or	r24, r18
 94c:	85 bb       	out	0x15, r24	; 21
 94e:	08 95       	ret
 950:	44 23       	and	r20, r20
 952:	19 f0       	breq	.+6      	; 0x95a <DIO_voidSetPinValue+0xd6>
 954:	41 30       	cpi	r20, 0x01	; 1
 956:	69 f0       	breq	.+26     	; 0x972 <DIO_voidSetPinValue+0xee>
 958:	08 95       	ret
 95a:	22 b3       	in	r18, 0x12	; 18
 95c:	81 e0       	ldi	r24, 0x01	; 1
 95e:	90 e0       	ldi	r25, 0x00	; 0
 960:	02 c0       	rjmp	.+4      	; 0x966 <DIO_voidSetPinValue+0xe2>
 962:	88 0f       	add	r24, r24
 964:	99 1f       	adc	r25, r25
 966:	6a 95       	dec	r22
 968:	e2 f7       	brpl	.-8      	; 0x962 <DIO_voidSetPinValue+0xde>
 96a:	80 95       	com	r24
 96c:	82 23       	and	r24, r18
 96e:	82 bb       	out	0x12, r24	; 18
 970:	08 95       	ret
 972:	22 b3       	in	r18, 0x12	; 18
 974:	81 e0       	ldi	r24, 0x01	; 1
 976:	90 e0       	ldi	r25, 0x00	; 0
 978:	02 c0       	rjmp	.+4      	; 0x97e <DIO_voidSetPinValue+0xfa>
 97a:	88 0f       	add	r24, r24
 97c:	99 1f       	adc	r25, r25
 97e:	6a 95       	dec	r22
 980:	e2 f7       	brpl	.-8      	; 0x97a <DIO_voidSetPinValue+0xf6>
 982:	82 2b       	or	r24, r18
 984:	82 bb       	out	0x12, r24	; 18
 986:	08 95       	ret

00000988 <DIO_voidGetPinValue>:
 988:	84 30       	cpi	r24, 0x04	; 4
 98a:	c0 f5       	brcc	.+112    	; 0x9fc <DIO_voidGetPinValue+0x74>
 98c:	68 30       	cpi	r22, 0x08	; 8
 98e:	b0 f5       	brcc	.+108    	; 0x9fc <DIO_voidGetPinValue+0x74>
 990:	41 15       	cp	r20, r1
 992:	51 05       	cpc	r21, r1
 994:	99 f1       	breq	.+102    	; 0x9fc <DIO_voidGetPinValue+0x74>
 996:	81 30       	cpi	r24, 0x01	; 1
 998:	89 f0       	breq	.+34     	; 0x9bc <DIO_voidGetPinValue+0x34>
 99a:	28 f0       	brcs	.+10     	; 0x9a6 <DIO_voidGetPinValue+0x1e>
 99c:	82 30       	cpi	r24, 0x02	; 2
 99e:	c9 f0       	breq	.+50     	; 0x9d2 <DIO_voidGetPinValue+0x4a>
 9a0:	83 30       	cpi	r24, 0x03	; 3
 9a2:	11 f1       	breq	.+68     	; 0x9e8 <DIO_voidGetPinValue+0x60>
 9a4:	08 95       	ret
 9a6:	89 b3       	in	r24, 0x19	; 25
 9a8:	90 e0       	ldi	r25, 0x00	; 0
 9aa:	02 c0       	rjmp	.+4      	; 0x9b0 <DIO_voidGetPinValue+0x28>
 9ac:	95 95       	asr	r25
 9ae:	87 95       	ror	r24
 9b0:	6a 95       	dec	r22
 9b2:	e2 f7       	brpl	.-8      	; 0x9ac <DIO_voidGetPinValue+0x24>
 9b4:	81 70       	andi	r24, 0x01	; 1
 9b6:	fa 01       	movw	r30, r20
 9b8:	80 83       	st	Z, r24
 9ba:	08 95       	ret
 9bc:	86 b3       	in	r24, 0x16	; 22
 9be:	90 e0       	ldi	r25, 0x00	; 0
 9c0:	02 c0       	rjmp	.+4      	; 0x9c6 <DIO_voidGetPinValue+0x3e>
 9c2:	95 95       	asr	r25
 9c4:	87 95       	ror	r24
 9c6:	6a 95       	dec	r22
 9c8:	e2 f7       	brpl	.-8      	; 0x9c2 <DIO_voidGetPinValue+0x3a>
 9ca:	81 70       	andi	r24, 0x01	; 1
 9cc:	fa 01       	movw	r30, r20
 9ce:	80 83       	st	Z, r24
 9d0:	08 95       	ret
 9d2:	83 b3       	in	r24, 0x13	; 19
 9d4:	90 e0       	ldi	r25, 0x00	; 0
 9d6:	02 c0       	rjmp	.+4      	; 0x9dc <DIO_voidGetPinValue+0x54>
 9d8:	95 95       	asr	r25
 9da:	87 95       	ror	r24
 9dc:	6a 95       	dec	r22
 9de:	e2 f7       	brpl	.-8      	; 0x9d8 <DIO_voidGetPinValue+0x50>
 9e0:	81 70       	andi	r24, 0x01	; 1
 9e2:	fa 01       	movw	r30, r20
 9e4:	80 83       	st	Z, r24
 9e6:	08 95       	ret
 9e8:	80 b3       	in	r24, 0x10	; 16
 9ea:	90 e0       	ldi	r25, 0x00	; 0
 9ec:	02 c0       	rjmp	.+4      	; 0x9f2 <DIO_voidGetPinValue+0x6a>
 9ee:	95 95       	asr	r25
 9f0:	87 95       	ror	r24
 9f2:	6a 95       	dec	r22
 9f4:	e2 f7       	brpl	.-8      	; 0x9ee <DIO_voidGetPinValue+0x66>
 9f6:	81 70       	andi	r24, 0x01	; 1
 9f8:	fa 01       	movw	r30, r20
 9fa:	80 83       	st	Z, r24
 9fc:	08 95       	ret

000009fe <DIO_voidActivePinInPullUpResistance>:
}


void DIO_voidActivePinInPullUpResistance(u8 copy_u8PortId, u8 copy_u8PinId)
{
	if((copy_u8PortId<=DIO_PORTD)&&(copy_u8PinId<=DIO_PIN7))
 9fe:	84 30       	cpi	r24, 0x04	; 4
 a00:	a8 f5       	brcc	.+106    	; 0xa6c <DIO_voidActivePinInPullUpResistance+0x6e>
 a02:	68 30       	cpi	r22, 0x08	; 8
 a04:	98 f5       	brcc	.+102    	; 0xa6c <DIO_voidActivePinInPullUpResistance+0x6e>
	{
		switch(copy_u8PortId)
 a06:	81 30       	cpi	r24, 0x01	; 1
 a08:	89 f0       	breq	.+34     	; 0xa2c <DIO_voidActivePinInPullUpResistance+0x2e>
 a0a:	28 f0       	brcs	.+10     	; 0xa16 <DIO_voidActivePinInPullUpResistance+0x18>
 a0c:	82 30       	cpi	r24, 0x02	; 2
 a0e:	c9 f0       	breq	.+50     	; 0xa42 <DIO_voidActivePinInPullUpResistance+0x44>
 a10:	83 30       	cpi	r24, 0x03	; 3
 a12:	11 f1       	breq	.+68     	; 0xa58 <DIO_voidActivePinInPullUpResistance+0x5a>
 a14:	08 95       	ret
		{
		case DIO_PORTA:
			SET_BIT(PORTA_REG, copy_u8PinId);
 a16:	2b b3       	in	r18, 0x1b	; 27
 a18:	81 e0       	ldi	r24, 0x01	; 1
 a1a:	90 e0       	ldi	r25, 0x00	; 0
 a1c:	02 c0       	rjmp	.+4      	; 0xa22 <DIO_voidActivePinInPullUpResistance+0x24>
 a1e:	88 0f       	add	r24, r24
 a20:	99 1f       	adc	r25, r25
 a22:	6a 95       	dec	r22
 a24:	e2 f7       	brpl	.-8      	; 0xa1e <DIO_voidActivePinInPullUpResistance+0x20>
 a26:	82 2b       	or	r24, r18
 a28:	8b bb       	out	0x1b, r24	; 27
			break;
 a2a:	08 95       	ret

		case DIO_PORTB:
			SET_BIT(PORTB_REG, copy_u8PinId);
 a2c:	28 b3       	in	r18, 0x18	; 24
 a2e:	81 e0       	ldi	r24, 0x01	; 1
 a30:	90 e0       	ldi	r25, 0x00	; 0
 a32:	02 c0       	rjmp	.+4      	; 0xa38 <DIO_voidActivePinInPullUpResistance+0x3a>
 a34:	88 0f       	add	r24, r24
 a36:	99 1f       	adc	r25, r25
 a38:	6a 95       	dec	r22
 a3a:	e2 f7       	brpl	.-8      	; 0xa34 <DIO_voidActivePinInPullUpResistance+0x36>
 a3c:	82 2b       	or	r24, r18
 a3e:	88 bb       	out	0x18, r24	; 24
			break;
 a40:	08 95       	ret

		case DIO_PORTC:
			SET_BIT(PORTC_REG, copy_u8PinId);
 a42:	25 b3       	in	r18, 0x15	; 21
 a44:	81 e0       	ldi	r24, 0x01	; 1
 a46:	90 e0       	ldi	r25, 0x00	; 0
 a48:	02 c0       	rjmp	.+4      	; 0xa4e <DIO_voidActivePinInPullUpResistance+0x50>
 a4a:	88 0f       	add	r24, r24
 a4c:	99 1f       	adc	r25, r25
 a4e:	6a 95       	dec	r22
 a50:	e2 f7       	brpl	.-8      	; 0xa4a <DIO_voidActivePinInPullUpResistance+0x4c>
 a52:	82 2b       	or	r24, r18
 a54:	85 bb       	out	0x15, r24	; 21
			break;
 a56:	08 95       	ret

		case DIO_PORTD:
			SET_BIT(PORTD_REG, copy_u8PinId);
 a58:	22 b3       	in	r18, 0x12	; 18
 a5a:	81 e0       	ldi	r24, 0x01	; 1
 a5c:	90 e0       	ldi	r25, 0x00	; 0
 a5e:	02 c0       	rjmp	.+4      	; 0xa64 <DIO_voidActivePinInPullUpResistance+0x66>
 a60:	88 0f       	add	r24, r24
 a62:	99 1f       	adc	r25, r25
 a64:	6a 95       	dec	r22
 a66:	e2 f7       	brpl	.-8      	; 0xa60 <DIO_voidActivePinInPullUpResistance+0x62>
 a68:	82 2b       	or	r24, r18
 a6a:	82 bb       	out	0x12, r24	; 18
 a6c:	08 95       	ret

00000a6e <__mulsi3>:
 a6e:	db 01       	movw	r26, r22
 a70:	8f 93       	push	r24
 a72:	9f 93       	push	r25
 a74:	0e 94 88 05 	call	0xb10	; 0xb10 <__muluhisi3>
 a78:	bf 91       	pop	r27
 a7a:	af 91       	pop	r26
 a7c:	a2 9f       	mul	r26, r18
 a7e:	80 0d       	add	r24, r0
 a80:	91 1d       	adc	r25, r1
 a82:	a3 9f       	mul	r26, r19
 a84:	90 0d       	add	r25, r0
 a86:	b2 9f       	mul	r27, r18
 a88:	90 0d       	add	r25, r0
 a8a:	11 24       	eor	r1, r1
 a8c:	08 95       	ret

00000a8e <__udivmodsi4>:
 a8e:	a1 e2       	ldi	r26, 0x21	; 33
 a90:	1a 2e       	mov	r1, r26
 a92:	aa 1b       	sub	r26, r26
 a94:	bb 1b       	sub	r27, r27
 a96:	fd 01       	movw	r30, r26
 a98:	0d c0       	rjmp	.+26     	; 0xab4 <__udivmodsi4_ep>

00000a9a <__udivmodsi4_loop>:
 a9a:	aa 1f       	adc	r26, r26
 a9c:	bb 1f       	adc	r27, r27
 a9e:	ee 1f       	adc	r30, r30
 aa0:	ff 1f       	adc	r31, r31
 aa2:	a2 17       	cp	r26, r18
 aa4:	b3 07       	cpc	r27, r19
 aa6:	e4 07       	cpc	r30, r20
 aa8:	f5 07       	cpc	r31, r21
 aaa:	20 f0       	brcs	.+8      	; 0xab4 <__udivmodsi4_ep>
 aac:	a2 1b       	sub	r26, r18
 aae:	b3 0b       	sbc	r27, r19
 ab0:	e4 0b       	sbc	r30, r20
 ab2:	f5 0b       	sbc	r31, r21

00000ab4 <__udivmodsi4_ep>:
 ab4:	66 1f       	adc	r22, r22
 ab6:	77 1f       	adc	r23, r23
 ab8:	88 1f       	adc	r24, r24
 aba:	99 1f       	adc	r25, r25
 abc:	1a 94       	dec	r1
 abe:	69 f7       	brne	.-38     	; 0xa9a <__udivmodsi4_loop>
 ac0:	60 95       	com	r22
 ac2:	70 95       	com	r23
 ac4:	80 95       	com	r24
 ac6:	90 95       	com	r25
 ac8:	9b 01       	movw	r18, r22
 aca:	ac 01       	movw	r20, r24
 acc:	bd 01       	movw	r22, r26
 ace:	cf 01       	movw	r24, r30
 ad0:	08 95       	ret

00000ad2 <__divmodsi4>:
 ad2:	05 2e       	mov	r0, r21
 ad4:	97 fb       	bst	r25, 7
 ad6:	1e f4       	brtc	.+6      	; 0xade <__divmodsi4+0xc>
 ad8:	00 94       	com	r0
 ada:	0e 94 80 05 	call	0xb00	; 0xb00 <__negsi2>
 ade:	57 fd       	sbrc	r21, 7
 ae0:	07 d0       	rcall	.+14     	; 0xaf0 <__divmodsi4_neg2>
 ae2:	0e 94 47 05 	call	0xa8e	; 0xa8e <__udivmodsi4>
 ae6:	07 fc       	sbrc	r0, 7
 ae8:	03 d0       	rcall	.+6      	; 0xaf0 <__divmodsi4_neg2>
 aea:	4e f4       	brtc	.+18     	; 0xafe <__divmodsi4_exit>
 aec:	0c 94 80 05 	jmp	0xb00	; 0xb00 <__negsi2>

00000af0 <__divmodsi4_neg2>:
 af0:	50 95       	com	r21
 af2:	40 95       	com	r20
 af4:	30 95       	com	r19
 af6:	21 95       	neg	r18
 af8:	3f 4f       	sbci	r19, 0xFF	; 255
 afa:	4f 4f       	sbci	r20, 0xFF	; 255
 afc:	5f 4f       	sbci	r21, 0xFF	; 255

00000afe <__divmodsi4_exit>:
 afe:	08 95       	ret

00000b00 <__negsi2>:
 b00:	90 95       	com	r25
 b02:	80 95       	com	r24
 b04:	70 95       	com	r23
 b06:	61 95       	neg	r22
 b08:	7f 4f       	sbci	r23, 0xFF	; 255
 b0a:	8f 4f       	sbci	r24, 0xFF	; 255
 b0c:	9f 4f       	sbci	r25, 0xFF	; 255
 b0e:	08 95       	ret

00000b10 <__muluhisi3>:
 b10:	0e 94 93 05 	call	0xb26	; 0xb26 <__umulhisi3>
 b14:	a5 9f       	mul	r26, r21
 b16:	90 0d       	add	r25, r0
 b18:	b4 9f       	mul	r27, r20
 b1a:	90 0d       	add	r25, r0
 b1c:	a4 9f       	mul	r26, r20
 b1e:	80 0d       	add	r24, r0
 b20:	91 1d       	adc	r25, r1
 b22:	11 24       	eor	r1, r1
 b24:	08 95       	ret

00000b26 <__umulhisi3>:
 b26:	a2 9f       	mul	r26, r18
 b28:	b0 01       	movw	r22, r0
 b2a:	b3 9f       	mul	r27, r19
 b2c:	c0 01       	movw	r24, r0
 b2e:	a3 9f       	mul	r26, r19
 b30:	70 0d       	add	r23, r0
 b32:	81 1d       	adc	r24, r1
 b34:	11 24       	eor	r1, r1
 b36:	91 1d       	adc	r25, r1
 b38:	b2 9f       	mul	r27, r18
 b3a:	70 0d       	add	r23, r0
 b3c:	81 1d       	adc	r24, r1
 b3e:	11 24       	eor	r1, r1
 b40:	91 1d       	adc	r25, r1
 b42:	08 95       	ret

00000b44 <_exit>:
 b44:	f8 94       	cli

00000b46 <__stop_program>:
 b46:	ff cf       	rjmp	.-2      	; 0xb46 <__stop_program>
